/////////////////////////////////////////////////////////////
// 1611. Minimum One Bit Operations to Make Integers Zero
// https://leetcode.com/problems/minimum-one-bit-operations-to-make-integers-zero/

use std::time;

static MODULE_NAME: &str = "change_me_0001";

#[allow(dead_code)]
#[allow(non_snake_case)]

fn main() {
    println!("\n\n<*>-<*>-<*> {}::run() <*>-<*>-<*>", MODULE_NAME);
    let now = time::Instant::now();
    run();
    let elapsed_time = now.elapsed();
    println!("<*>-<*>-<*> Finished in {} microseconds. <*>-<*>-<*>", elapsed_time.as_micros());
}

struct Solution {}

pub fn run() {
    struct TestCase {
        a: String,
        b: String,
        result: bool,
    }

    let test_cases = [
        TestCase {
            a: "ab".to_string(),
            b: "ba".to_string(),
            result: true,
        },
    ];

    for i in 0..test_cases.len() {
        // rename solution
        if Solution::solution(
            test_cases[i].a.to_string(),
            test_cases[i].b.to_string()) == test_cases[i].result {
            println!("Test case {} passed", i + 1);
        } else {
            println!("Test case {} FAILED", i + 1);
        }
    }
}


/////////////////////////////////////////////////////////////
// Solution implementation

#[allow(non_snake_case)]

impl Solution {
    pub fn solution(s: String, goal: String) -> bool {
        true
    }
}